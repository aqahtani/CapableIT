//- one level box: used by hard, soft, and english levelers 
mixin formLevelBox(title, label, kind, description, color)
  a(
    href="#"
    role="button"
    class="#{kind}"
    style="background-color:#{color}"
    data-container="body"
    data-toggle="popover" 
    data-trigger="focus"
    data-placement="right"
    data-content="#{description}"
    data-original-title=""
    tabindex="-1" 
    title="#{title}").btn.btn-sm= label


//- a mixin to display english levels as select input
//- levels is an array of english level objects
//- selected is an english level object
mixin formEnglishLeveler(inputName, levels, selected)
  select(name='#{inputName}', id='#{inputName}').form-control
    each level in levels
      - var text = level.grade + ' - ' + level.title
      if (selected && level.id == selected.id)
        option(value="#{level.id}",selected)= text
      else
        option(value="#{level.id}")= text


//- form mixin for hard skill leveler with inputs for current 
mixin formHardLeveler(skill, target, current)
  - current = current === undefined ? 0 : current 
  .row
    .col-sm-6
      h5= skill.title
    .col-sm-4: .bs-component: .btn-group.btn-group-justified
      for i in [1, 2, 3, 4, 5, 6, 7]
        if (i == target && i == current)
          - var kind = "btn-success"
        else if (i == target)
          - var kind = "btn-danger"
        else if (i == current)
          - var kind = "btn-info"
        else
          - var kind = "btn-default"
        if (i < skill.levels.min || i > skill.levels.max)
          - var kind = kind + " disabled"
        +formLevelBox(skill.title, i, kind, skill.levels.descriptions[i - skill.levels.min])
    .col-sm-2: input(type="number", step="1", min="1", max="7", name="professional.currentLevels", value="#{current}", required).form-control.input-sm

//- form mixin for soft skill leveler with inputs for current 
mixin formSoftLeveler(skill, target, current)
  - current = current === undefined ? 0 : current 
  .row
    .col-sm-6
      h5= skill.title
    .col-sm-4: .bs-component: .btn-group.btn-group-justified
      for i in [1, 2, 3, 4, 5]
        if (i == target && i == current)
          - var kind = "btn-success"
        else if (i == target)
          - var kind = "btn-warning"
        else if (i == current)
          - var kind = "btn-info"
        else
          - var kind = "btn-default"
        +formLevelBox(skill.title, i, kind, skill.levelDescriptions[i])
    .col-sm-2: input(type="number", step="1", min="1", max="5", name="behavioral.currentLevels", value="#{current}", required).form-control.input-sm

//- A mixin to generate multiple text inputs for a TextArray Field
mixin formMultiText(field, items)
  div(data-field-path='#{field}').field-textarray
    div
      each item in items
        .input-group.input-group-sm
          input(type="text", name="#{field}", value="#{item}").form-control
          span.input-group-btn: button(type="button").btn.btn-danger.btn-remove-item: span.glyphicon.glyphicon-remove
    .btn.btn-info.btn-sm.btn-add-item: span.glyphicon.glyphicon-plus

//- A mixin to select/options for a Select Field
//- which is for a simple list of text inputs
mixin formSelectInput(field, items, selected)
  select(name='#{field}', id='#{field}').form-control.input-sm
    each item in items
      if item == selected
        option(value="#{item}", selected)= item
      else
        option(value="#{item}")= item

//- a mixin to display a list as select input
//- list is an array of objects (of the related list items from keystone)
//- selected is the selected object (a single item from the list)
//- it assumes that each item has an 'id' and a 'title'
mixin formSelectList(inputName, list, selected)
  select(name='#{inputName}', id='#{inputName}').form-control
    each item in list
      if (selected && item.id == selected.id)
        option(value="#{item.id}", selected)= item.title
      else
        option(value="#{item.id}")= item.title

//- this one uses select2 which enhances the select tag
mixin formSelect2List(inputName, list, selected)
  select(name='#{inputName}', id='#{inputName}', style="width: 100%").form-control.select2
    each item in list
      if (selected && item.id == selected.id)
        option(value="#{item.id}", selected)= item.title
      else
        option(value="#{item.id}")= item.title

//- Select form field with enhanced select2 functionality + multiple selection
mixin formSelect2Multiple(inputName, options, selectedOptions)

  select(name='#{inputName}', id='#{inputName}', multiple='multiple', style='width: 100%').form-control.select2
    each option in options
      //- for some reason, the following condition doesn't work!
      //- if selectedOptions &&_.contains(selectedOptions, option.id)
      //- that's why it is replaced by the indexOf on the array!!
      //- Also, couldn't use indexOf as well!!!
      //-if selectedOptions && selectedOptions.indexOf(option.id) > -1
      //- Now I used old school looping through the values and comparing :(
      - var picked = false
      if selectedOptions
        each value in selectedOptions
          if value == option.id
            - picked = true

      if picked
        option(value='#{option.id}', selected)= option.title
      else
        option(value='#{option.id}')= option.title
